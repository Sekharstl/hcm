{
  "info": {
    "_postman_id": "hcm-generated-collection-uuid",
    "name": "eZHire Core API (hcm-core-service)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Generated from Java Spring Boot controllers with hierarchical grouping and comprehensive scripts."
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:9112"
    },
    {
      "key": "authToken",
      "value": ""
    },
    {
      "key": "candidateId",
      "value": ""
    },
    {
      "key": "vendorId",
      "value": ""
    },
    {
      "key": "tenantId",
      "value": ""
    },
    {
      "key": "organizationId",
      "value": ""
    },
    {
      "key": "applicationId",
      "value": ""
    },
    {
      "key": "jobRequisitionId",
      "value": ""
    },
    {
      "key": "positionId",
      "value": ""
    },
    {
      "key": "positionStatusId",
      "value": ""
    },
    {
      "key": "applicationStatusId",
      "value": ""
    },
    {
      "key": "candidateEmail",
      "value": ""
    },
    {
      "key": "candidateFirstName",
      "value": ""
    },
    {
      "key": "candidateLastName",
      "value": ""
    },
    {
      "key": "candidatePhone",
      "value": ""
    },
    {
      "key": "vendorName",
      "value": ""
    },
    {
      "key": "vendorEmail",
      "value": ""
    },
    {
      "key": "vendorPhone",
      "value": ""
    },
    {
      "key": "organizationName",
      "value": ""
    },
    {
      "key": "organizationEmail",
      "value": ""
    },
    {
      "key": "organizationPhone",
      "value": ""
    },
    {
      "key": "positionTitle",
      "value": ""
    },
    {
      "key": "tenantName",
      "value": ""
    },
    {
      "key": "tenantDomain",
      "value": ""
    },
    {
      "key": "tenantContactEmail",
      "value": ""
    },
    {
      "key": "tenantContactPhone",
      "value": ""
    },
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "name",
      "value": "Sample Name"
    },
    {
      "key": "description",
      "value": "Sample Description"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set static tenantId and organizationId for all create requests",
          "pm.collectionVariables.set('tenantId', 'a15104c0-44b7-4512-b9b1-6122e7af7d41');",
          "pm.collectionVariables.set('organizationId', '08b06d14-4e03-11f0-bc56-325096b39f47');",
          "",
          "// Generate random data functions",
          "function uuidv4() {",
          "  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
          "    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
          "    return v.toString(16);",
          "  });",
          "}",
          "",
          "function randomEmail() {",
          "  const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'example.com'];",
          "  const names = ['john', 'jane', 'mike', 'sarah', 'david', 'emma', 'alex', 'lisa', 'tom', 'anna'];",
          "  const randomName = names[Math.floor(Math.random() * names.length)];",
          "  const randomNumber = Math.floor(Math.random() * 10000);",
          "  const randomDomain = domains[Math.floor(Math.random() * domains.length)];",
          "  return `${randomName}${randomNumber}@${randomDomain}`;",
          "}",
          "",
          "function randomPhone() {",
          "  const areaCodes = ['212', '415', '310', '312', '404', '305', '702', '602', '713', '214'];",
          "  const randomAreaCode = areaCodes[Math.floor(Math.random() * areaCodes.length)];",
          "  const randomNumber = Math.floor(1000000 + Math.random() * 9000000);",
          "  return `+1-${randomAreaCode}-${randomNumber}`;",
          "}",
          "",
          "function randomName() {",
          "  const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emma', 'Alex', 'Lisa', 'Tom', 'Anna'];",
          "  const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];",
          "  return {",
          "    firstName: firstNames[Math.floor(Math.random() * firstNames.length)],",
          "    lastName: lastNames[Math.floor(Math.random() * lastNames.length)]",
          "  };",
          "}",
          "",
          "function randomCompanyName() {",
          "  const prefixes = ['Tech', 'Global', 'Innovative', 'Advanced', 'Smart', 'Digital'];",
          "  const suffixes = ['Solutions', 'Systems', 'Technologies', 'Corp', 'Inc', 'Labs'];",
          "  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];",
          "  const randomSuffix = suffixes[Math.floor(Math.random() * suffixes.length)];",
          "  return `${randomPrefix} ${randomSuffix}`;",
          "}",
          "",
          "// Generate random candidate data",
          "const candidateName = randomName();",
          "pm.collectionVariables.set('candidateEmail', randomEmail());",
          "pm.collectionVariables.set('candidateFirstName', candidateName.firstName);",
          "pm.collectionVariables.set('candidateLastName', candidateName.lastName);",
          "pm.collectionVariables.set('candidatePhone', randomPhone());",
          "",
          "// Generate random vendor data",
          "pm.collectionVariables.set('vendorName', randomCompanyName());",
          "pm.collectionVariables.set('vendorEmail', randomEmail());",
          "pm.collectionVariables.set('vendorPhone', randomPhone());",
          "",
          "// Generate random organization data",
          "pm.collectionVariables.set('organizationName', randomCompanyName());",
          "pm.collectionVariables.set('organizationEmail', randomEmail());",
          "pm.collectionVariables.set('organizationPhone', randomPhone());",
          "",
          "// Generate random vendorId for candidate creation",
          "pm.collectionVariables.set('vendorId', uuidv4())"
        ]
      }
    },
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add authentication header if token is available",
          "if (pm.collectionVariables.get('authToken') && pm.collectionVariables.get('authToken') !== '') {",
          "  pm.request.headers.add({",
          "    key: 'Authorization',",
          "    value: 'Bearer ' + pm.collectionVariables.get('authToken')",
          "  });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global error handling and response validation",
          "pm.test('Response time is less than 5000ms', function () {",
          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid status code', function () {",
          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "  console.log('Error Response:', pm.response.text());",
          "}",
          "",
          "// Validate JSON response structure",
          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "  try {",
          "    const jsonResponse = pm.response.json();",
          "    pm.test('Response is valid JSON', function () {",
          "      pm.expect(jsonResponse).to.be.an('object');",
          "    });",
          "  } catch (e) {",
          "    pm.test('Response is valid JSON', function () {",
          "      pm.expect.fail('Response is not valid JSON');",
          "    });",
          "  }",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Applications",
      "item": [
        {
          "name": "Get All Applications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Applications",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Applications",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"applicationId\": \"{{applicationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"requisitionId\": \"{{requisitionId}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"appliedDate\": \"2024-01-15\",\n  \"source\": \"{{source}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Applications",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Candidate by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Candidate by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}/application/{{applicationId}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}",
                "application",
                "{{applicationId}}",
                "status"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Status",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Application",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}/application/{{applicationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}",
                "application",
                "{{applicationId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"applicationId\": \"{{applicationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"requisitionId\": \"{{requisitionId}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"appliedDate\": \"2024-01-15\",\n  \"source\": \"{{source}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Update Application",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Application",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}/application/{{applicationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}",
                "application",
                "{{applicationId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Delete Application",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}/application/{{applicationId}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}",
                "application",
                "{{applicationId}}",
                "status"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"statusId\": \"{{statusId}}\",\n  \"name\": \"{{name}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Update Status",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Status",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/candidate/{{candidateId}}/application/{{applicationId}}/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "candidate",
                "{{candidateId}}",
                "application",
                "{{applicationId}}",
                "status"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Delete Status",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Status",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/applications/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "applications",
                "status"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"statusId\": \"{{statusId}}\",\n  \"name\": \"{{name}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Status",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Candidates",
      "item": [
        {
          "name": "Get All Candidates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/candidates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "candidates"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Candidates",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Candidates",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/candidates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "candidates"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"candidateId\": \"{{candidateId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"{{phone}}\",\n  \"address\": \"{{address}}\",\n  \"dateOfBirth\": \"2024-01-15\",\n  \"gender\": \"{{gender}}\",\n  \"nationality\": \"{{nationality}}\",\n  \"middleName\": \"{{middleName}}\",\n  \"city\": \"{{city}}\",\n  \"state\": \"{{state}}\",\n  \"country\": \"{{country}}\",\n  \"postalCode\": \"{{postalCode}}\",\n  \"linkedinUrl\": \"{{linkedinUrl}}\",\n  \"currentSalary\": 50000.0,\n  \"expectedSalary\": 50000.0,\n  \"noticePeriod\": 1,\n  \"availabilityDate\": \"2024-01-15\",\n  \"status\": \"{{status}}\",\n  \"source\": \"{{source}}\",\n  \"vendorId\": \"{{vendorId}}\",\n  \"notes\": \"{{notes}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Candidates",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Candidates",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/candidates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "candidates"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"candidateId\": \"{{candidateId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"{{phone}}\",\n  \"address\": \"{{address}}\",\n  \"dateOfBirth\": \"2024-01-15\",\n  \"gender\": \"{{gender}}\",\n  \"nationality\": \"{{nationality}}\",\n  \"middleName\": \"{{middleName}}\",\n  \"city\": \"{{city}}\",\n  \"state\": \"{{state}}\",\n  \"country\": \"{{country}}\",\n  \"postalCode\": \"{{postalCode}}\",\n  \"linkedinUrl\": \"{{linkedinUrl}}\",\n  \"currentSalary\": 50000.0,\n  \"expectedSalary\": 50000.0,\n  \"noticePeriod\": 1,\n  \"availabilityDate\": \"2024-01-15\",\n  \"status\": \"{{status}}\",\n  \"source\": \"{{source}}\",\n  \"vendorId\": \"{{vendorId}}\",\n  \"notes\": \"{{notes}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"deletedAt\": \"2024-01-15T10:00:00Z\",\n  \"deletedBy\": \"{{uuid}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Update Candidates",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Candidates",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/candidates",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "candidates"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Delete Candidates",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{candidateId}",
          "item": [
            {
              "name": "Get Candidates by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "candidates",
                    "{{candidateId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Candidates by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Candidates",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "candidates",
                    "{{candidateId}}"
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"candidateId\": \"{{candidateId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"{{phone}}\",\n  \"address\": \"{{address}}\",\n  \"dateOfBirth\": \"2024-01-15\",\n  \"gender\": \"{{gender}}\",\n  \"nationality\": \"{{nationality}}\",\n  \"middleName\": \"{{middleName}}\",\n  \"city\": \"{{city}}\",\n  \"state\": \"{{state}}\",\n  \"country\": \"{{country}}\",\n  \"postalCode\": \"{{postalCode}}\",\n  \"linkedinUrl\": \"{{linkedinUrl}}\",\n  \"currentSalary\": 50000.0,\n  \"expectedSalary\": 50000.0,\n  \"noticePeriod\": 1,\n  \"availabilityDate\": \"2024-01-15\",\n  \"status\": \"{{status}}\",\n  \"source\": \"{{source}}\",\n  \"vendorId\": \"{{vendorId}}\",\n  \"notes\": \"{{notes}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"deletedAt\": \"2024-01-15T10:00:00Z\",\n  \"deletedBy\": \"{{uuid}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Update Candidates",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Candidates",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "candidates",
                    "{{candidateId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Candidates",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "skills",
              "item": [
                {
                  "name": "Get All Skills",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/skills",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "skills"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Skills",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Skills",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/skills",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "skills"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"candidateId\": \"{{candidateId}}\",\n  \"skillId\": \"{{skillId}}\",\n  \"proficiencyLevel\": \"{{proficiencyLevel}}\",\n  \"yearsOfExperience\": 1\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Skills",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "educations",
              "item": [
                {
                  "name": "Get All Educations",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/educations",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "educations"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Educations",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Educations",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/educations",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "educations"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"educationId\": \"{{educationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"institution\": \"{{institution}}\",\n  \"degree\": \"{{degree}}\",\n  \"fieldOfStudy\": \"{{fieldOfStudy}}\",\n  \"startDate\": \"2024-01-15\",\n  \"endDate\": \"2024-01-15\",\n  \"grade\": \"{{grade}}\",\n  \"notes\": \"{{notes}}\",\n  \"description\": \"{{description}}\",\n  \"institutionName\": \"{{institutionName}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Educations",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "work-histories",
              "item": [
                {
                  "name": "Get All Work-Histories",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/work-histories",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "work-histories"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Work-Histories",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Work-Histories",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/work-histories",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "work-histories"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"workHistoryId\": \"{{workHistoryId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"companyName\": \"{{companyName}}\",\n  \"positionTitle\": \"{{positionTitle}}\",\n  \"location\": \"{{location}}\",\n  \"startDate\": \"2024-01-15\",\n  \"endDate\": \"2024-01-15\",\n  \"responsibilities\": \"{{responsibilities}}\",\n  \"description\": \"{{description}}\",\n  \"jobTitle\": \"{{jobTitle}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Work-Histories",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "certifications",
              "item": [
                {
                  "name": "Get All Certifications",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/certifications",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "certifications"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Certifications",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Certifications",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/certifications",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "certifications"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"certificationId\": \"{{certificationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"certificateName\": \"{{certificateName}}\",\n  \"issuedBy\": \"{{issuedBy}}\",\n  \"issueDate\": \"2024-01-15\",\n  \"expiryDate\": \"2024-01-15\",\n  \"certificationName\": \"{{certificationName}}\",\n  \"issuingOrganization\": \"{{issuingOrganization}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Certifications",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "references",
              "item": [
                {
                  "name": "Get All References",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/references",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "references"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All References",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create References",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/references",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "references"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"referenceId\": \"{{referenceId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"referenceName\": \"{{referenceName}}\",\n  \"relationship\": \"{{relationship}}\",\n  \"company\": \"{{company}}\",\n  \"position\": \"{{position}}\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"{{phone}}\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create References",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "identities",
              "item": [
                {
                  "name": "Get All Identities",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/identities",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "identities"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Identities",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Identities",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/identities",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "identities"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"identityId\": \"{{identityId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"idTypeId\": \"{{idTypeId}}\",\n  \"idNumber\": \"{{idNumber}}\",\n  \"issuingCountry\": \"{{issuingCountry}}\",\n  \"issueDate\": \"2024-01-15\",\n  \"expiryDate\": \"2024-01-15\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\",\n  \"idTypeName\": \"{{idTypeName}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Identities",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "documents",
              "item": [
                {
                  "name": "Get All Documents",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/documents",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "documents"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Documents",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Documents",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/documents",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "documents"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"documentId\": \"{{documentId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"documentTypeId\": \"{{documentTypeId}}\",\n  \"fileName\": \"{{fileName}}\",\n  \"originalFileName\": \"{{originalFileName}}\",\n  \"filePath\": \"{{filePath}}\",\n  \"fileSize\": \"{{fileSize}}\",\n  \"mimeType\": \"{{mimeType}}\",\n  \"uploadDate\": \"2024-01-15T10:00:00Z\",\n  \"expiryDate\": \"2024-01-15\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\",\n  \"documentTypeName\": \"{{documentTypeName}}\",\n  \"downloadUrl\": \"{{downloadUrl}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Create Documents",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "educations_{educationId}",
              "item": [
                {
                  "name": "Update Educations",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/educations/{{educationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "educations",
                        "{{educationId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"educationId\": \"{{educationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"institution\": \"{{institution}}\",\n  \"degree\": \"{{degree}}\",\n  \"fieldOfStudy\": \"{{fieldOfStudy}}\",\n  \"startDate\": \"2024-01-15\",\n  \"endDate\": \"2024-01-15\",\n  \"grade\": \"{{grade}}\",\n  \"notes\": \"{{notes}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"description\": \"{{description}}\",\n  \"institutionName\": \"{{institutionName}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Educations",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Educations",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/educations/{{educationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "educations",
                        "{{educationId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Educations",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "work-histories_{workHistoryId}",
              "item": [
                {
                  "name": "Update Work-Histories",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/work-histories/{{workHistoryId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "work-histories",
                        "{{workHistoryId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"workHistoryId\": \"{{workHistoryId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"companyName\": \"{{companyName}}\",\n  \"positionTitle\": \"{{positionTitle}}\",\n  \"location\": \"{{location}}\",\n  \"startDate\": \"2024-01-15\",\n  \"endDate\": \"2024-01-15\",\n  \"responsibilities\": \"{{responsibilities}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"description\": \"{{description}}\",\n  \"jobTitle\": \"{{jobTitle}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Work-Histories",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Work-Histories",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/work-histories/{{workHistoryId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "work-histories",
                        "{{workHistoryId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Work-Histories",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "certifications_{certificationId}",
              "item": [
                {
                  "name": "Update Certifications",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/certifications/{{certificationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "certifications",
                        "{{certificationId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"certificationId\": \"{{certificationId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"certificateName\": \"{{certificateName}}\",\n  \"issuedBy\": \"{{issuedBy}}\",\n  \"issueDate\": \"2024-01-15\",\n  \"expiryDate\": \"2024-01-15\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"certificationName\": \"{{certificationName}}\",\n  \"issuingOrganization\": \"{{issuingOrganization}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Certifications",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Certifications",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/certifications/{{certificationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "certifications",
                        "{{certificationId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Certifications",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "skills_{skillId}",
              "item": [
                {
                  "name": "Update Skills",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/skills/{{skillId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "skills",
                        "{{skillId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"candidateId\": \"{{candidateId}}\",\n  \"skillId\": \"{{skillId}}\",\n  \"proficiencyLevel\": \"{{proficiencyLevel}}\",\n  \"yearsOfExperience\": 1,\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Skills",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Skills",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/skills/{{skillId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "skills",
                        "{{skillId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Skills",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "references_{referenceId}",
              "item": [
                {
                  "name": "Update References",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/references/{{referenceId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "references",
                        "{{referenceId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"referenceId\": \"{{referenceId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"referenceName\": \"{{referenceName}}\",\n  \"relationship\": \"{{relationship}}\",\n  \"company\": \"{{company}}\",\n  \"position\": \"{{position}}\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"{{phone}}\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update References",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete References",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/references/{{referenceId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "references",
                        "{{referenceId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete References",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "identities_{identityId}",
              "item": [
                {
                  "name": "Update Identities",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/identities/{{identityId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "identities",
                        "{{identityId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"identityId\": \"{{identityId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"idTypeId\": \"{{idTypeId}}\",\n  \"idNumber\": \"{{idNumber}}\",\n  \"issuingCountry\": \"{{issuingCountry}}\",\n  \"issueDate\": \"2024-01-15\",\n  \"expiryDate\": \"2024-01-15\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"idTypeName\": \"{{idTypeName}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Identities",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Identities",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/identities/{{identityId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "identities",
                        "{{identityId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Identities",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "documents_{documentId}",
              "item": [
                {
                  "name": "Update Documents",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/documents/{{documentId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "documents",
                        "{{documentId}}"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"documentId\": \"{{documentId}}\",\n  \"candidateId\": \"{{candidateId}}\",\n  \"documentTypeId\": \"{{documentTypeId}}\",\n  \"fileName\": \"{{fileName}}\",\n  \"originalFileName\": \"{{originalFileName}}\",\n  \"filePath\": \"{{filePath}}\",\n  \"fileSize\": \"{{fileSize}}\",\n  \"mimeType\": \"{{mimeType}}\",\n  \"uploadDate\": \"2024-01-15T10:00:00Z\",\n  \"expiryDate\": \"2024-01-15\",\n  \"isVerified\": true,\n  \"verificationDate\": \"2024-01-15T10:00:00Z\",\n  \"verifiedBy\": \"{{uuid}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\",\n  \"documentTypeName\": \"{{documentTypeName}}\",\n  \"downloadUrl\": \"{{downloadUrl}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Documents",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Documents",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/candidates/{{candidateId}}/documents/{{documentId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "candidates",
                        "{{candidateId}}",
                        "documents",
                        "{{documentId}}"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Delete Documents",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "",
      "item": [
        {
          "name": "Get All V1",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All V1",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Hello",
      "item": [
        {
          "name": "Get All Hello",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/hello",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "hello"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Hello",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Publish",
      "item": [
        {
          "name": "Create Publish",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/publish",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "publish"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{id}}\",\n  \"name\": \"{{name}}\",\n  \"description\": \"{{description}}\",\n  \"status\": \"Active\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Publish",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Job-Requisitions",
      "item": [
        {
          "name": "Get All Job-Requisitions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/job-requisitions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "job-requisitions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Job-Requisitions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Job-Requisitions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/job-requisitions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "job-requisitions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobRequisitionId\": \"{{jobRequisitionId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"positionId\": \"{{positionId}}\",\n  \"title\": \"{{title}}\",\n  \"description\": \"{{description}}\",\n  \"statusId\": \"{{statusId}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Job-Requisitions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Job-Requisitions",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/job-requisitions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "job-requisitions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobRequisitionId\": \"{{jobRequisitionId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"positionId\": \"{{positionId}}\",\n  \"title\": \"{{title}}\",\n  \"description\": \"{{description}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Update Job-Requisitions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{id}",
          "item": [
            {
              "name": "Get Job-Requisitions by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/job-requisitions/{{id}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "job-requisitions",
                    "{{id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Job-Requisitions by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Job-Requisitions",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/job-requisitions/{{id}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "job-requisitions",
                    "{{id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Job-Requisitions",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Master-Data",
      "item": [
        {
          "name": "Get All Master-Data",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Master-Data",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Document-Types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/document-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "document-types"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Document-Types",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Document-Types by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/document-types/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "document-types",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Document-Types by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/document-types/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "document-types",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Id-Types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/id-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "id-types"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Id-Types",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Id-Types by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/id-types/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "id-types",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Id-Types by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/id-types/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "id-types",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Countries",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/countries",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "countries"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Countries",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Countries by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/countries/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "countries",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Countries by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Code by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/countries/code/{{code}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "countries",
                "code",
                "{{code}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Code by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/countries/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "countries",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All States",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All States",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get States by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get States by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Country by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/country/{{countryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "country",
                "{{countryId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Country by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Country-Code by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/country-code/{{countryCode}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "country-code",
                "{{countryCode}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Country-Code by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/country/{{countryId}}/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "country",
                "{{countryId}}",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/states/country-code/{{countryCode}}/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "states",
                "country-code",
                "{{countryCode}}",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Skills",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/skills",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "skills"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Skills",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Skills by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/skills/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "skills",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Skills by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/skills/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "skills",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/skills/category/{{category}}/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "skills",
                "category",
                "{{category}}",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Departments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/departments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "departments"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Departments",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Departments by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/departments/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "departments",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Departments by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/departments/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "departments",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All User-Roles",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-roles",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-roles"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All User-Roles",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User-Roles by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-roles/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-roles",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get User-Roles by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-roles/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-roles",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All User-Types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-types"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All User-Types",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User-Types by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-types/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-types",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get User-Types by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/user-types/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "user-types",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Vendor-Statuses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/vendor-statuses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "vendor-statuses"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Vendor-Statuses",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Vendor-Statuses by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/vendor-statuses/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "vendor-statuses",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Vendor-Statuses by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Search",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/master-data/vendor-statuses/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "master-data",
                "vendor-statuses",
                "search"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Search",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Organizations",
      "item": [
        {
          "name": "Get All Organizations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/organizations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "organizations"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Organizations",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Organizations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/organizations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "organizations"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organizationId\": \"{{organizationId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"name\": \"{{name}}\",\n  \"address\": \"{{address}}\",\n  \"statusId\": \"{{statusId}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Organizations",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{organizationId}",
          "item": [
            {
              "name": "Get Organizations by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/organizations/{{organizationId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "organizations",
                    "{{organizationId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Organizations by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Organizations",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/organizations/{{organizationId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "organizations",
                    "{{organizationId}}"
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"organizationId\": \"{{organizationId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"name\": \"{{name}}\",\n  \"address\": \"{{address}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Update Organizations",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Organizations",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/organizations/{{organizationId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "organizations",
                    "{{organizationId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Organizations",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Positions",
      "item": [
        {
          "name": "Get All Positions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Positions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Positions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"positionId\": \"{{positionId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"departmentId\": \"{{departmentId}}\",\n  \"title\": \"{{title}}\",\n  \"location\": \"{{location}}\",\n  \"description\": \"{{description}}\",\n  \"employmentType\": \"{{employmentType}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"headcount\": 1\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Positions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Statuses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions/statuses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions",
                "statuses"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Statuses",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Statuses by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions/statuses/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions",
                "statuses",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Statuses by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Statuses",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions/statuses",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions",
                "statuses"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"statusId\": \"{{statusId}}\",\n  \"name\": \"{{name}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Statuses",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Statuses",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions/statuses/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions",
                "statuses",
                "{{id}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"statusId\": \"{{statusId}}\",\n  \"name\": \"{{name}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Update Statuses",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Statuses",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/positions/statuses/{{id}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "positions",
                "statuses",
                "{{id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Delete Statuses",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{id}",
          "item": [
            {
              "name": "Get Positions by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/positions/{{id}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "positions",
                    "{{id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Positions by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Positions",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/positions/{{id}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "positions",
                    "{{id}}"
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"positionId\": \"{{positionId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"departmentId\": \"{{departmentId}}\",\n  \"title\": \"{{title}}\",\n  \"location\": \"{{location}}\",\n  \"description\": \"{{description}}\",\n  \"employmentType\": \"{{employmentType}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"headcount\": 1,\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Update Positions",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Positions",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/positions/{{id}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "positions",
                    "{{id}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Positions",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Tenants",
      "item": [
        {
          "name": "Get All Tenants",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/tenants",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "tenants"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Tenants",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Tenants",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/tenants",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "tenants"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"name\": \"{{name}}\",\n  \"domain\": \"{{domain}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Tenants",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{tenantId}",
          "item": [
            {
              "name": "Get Tenants by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tenants/{{tenantId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tenants",
                    "{{tenantId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Tenants by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Tenants",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tenants/{{tenantId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tenants",
                    "{{tenantId}}"
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"name\": \"{{name}}\",\n  \"domain\": \"{{domain}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Update Tenants",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Tenants",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tenants/{{tenantId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tenants",
                    "{{tenantId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Tenants",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Transactions",
      "item": [
        {
          "name": "Get All Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Transactions",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Correlation by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/correlation/{{correlationKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "correlation",
                "{{correlationKey}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Correlation by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Entity by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/entity/{{entityId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "entity",
                "{{entityId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Entity by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Status by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/status/{{status}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "status",
                "{{status}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Status by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/service/{{serviceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "service",
                "{{serviceName}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Service by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Entity-Type by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/entity-type/{{entityType}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "entity-type",
                "{{entityType}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Entity-Type by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Pending",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/pending",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "pending"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Pending",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Failed",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/failed",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "failed"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Failed",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Successful",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/successful",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "successful"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Successful",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Retry",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/retry",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "retry"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Retry",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Status by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/count/status/{{status}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "count",
                "status",
                "{{status}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Status by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Status by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/count/service/{{serviceName}}/status/{{status}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "count",
                "service",
                "{{serviceName}}",
                "status",
                "{{status}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get Status by ID",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Generate-Id",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/transactions/generate-id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "transactions",
                "generate-id"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{id}}\",\n  \"name\": \"{{name}}\",\n  \"description\": \"{{description}}\",\n  \"status\": \"Active\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Generate-Id",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{transactionId}",
          "item": [
            {
              "name": "Get Transactions by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/transactions/{{transactionId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "transactions",
                    "{{transactionId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Transactions by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Transactions",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/transactions/{{transactionId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "transactions",
                    "{{transactionId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Transactions",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "exists",
              "item": [
                {
                  "name": "Get All Exists",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/transactions/{{transactionId}}/exists",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "transactions",
                        "{{transactionId}}",
                        "exists"
                      ]
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Get All Exists",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "status",
              "item": [
                {
                  "name": "Update Status",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/transactions/{{transactionId}}/status",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "transactions",
                        "{{transactionId}}",
                        "status"
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"statusId\": \"{{statusId}}\",\n  \"name\": \"{{name}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                    }
                  },
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "// Test script for Update Status",
                          "pm.test('Response time is less than 5000ms', function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test('Response has valid status code', function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                          "});",
                          "",
                          "// Log response for debugging",
                          "if (pm.response.code >= 400) {",
                          "  console.log('Error Response:', pm.response.text());",
                          "}",
                          "",
                          "// Validate JSON response structure",
                          "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                          "  try {",
                          "    const jsonResponse = pm.response.json();",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect(jsonResponse).to.be.an('object');",
                          "    });",
                          "  } catch (e) {",
                          "    pm.test('Response is valid JSON', function () {",
                          "      pm.expect.fail('Response is not valid JSON');",
                          "    });",
                          "  }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Vendors",
      "item": [
        {
          "name": "Get All Vendors",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/vendors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "vendors"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Get All Vendors",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Vendors",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/vendors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "vendors"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vendorId\": \"{{vendorId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"vendorName\": \"{{vendorName}}\",\n  \"contactName\": \"{{contactName}}\",\n  \"contactEmail\": \"{{contactEmail}}\",\n  \"contactPhone\": \"{{contactPhone}}\",\n  \"address\": \"{{address}}\",\n  \"statusId\": \"{{statusId}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Test script for Create Vendors",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response has valid status code', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "  console.log('Error Response:', pm.response.text());",
                  "}",
                  "",
                  "// Validate JSON response structure",
                  "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                  "  try {",
                  "    const jsonResponse = pm.response.json();",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect(jsonResponse).to.be.an('object');",
                  "    });",
                  "  } catch (e) {",
                  "    pm.test('Response is valid JSON', function () {",
                  "      pm.expect.fail('Response is not valid JSON');",
                  "    });",
                  "  }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "{vendorId}",
          "item": [
            {
              "name": "Get Vendors by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/vendors/{{vendorId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "vendors",
                    "{{vendorId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Get Vendors by ID",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Vendors",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/vendors/{{vendorId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "vendors",
                    "{{vendorId}}"
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"vendorId\": \"{{vendorId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"organizationId\": \"{{organizationId}}\",\n  \"vendorName\": \"{{vendorName}}\",\n  \"contactName\": \"{{contactName}}\",\n  \"contactEmail\": \"{{contactEmail}}\",\n  \"contactPhone\": \"{{contactPhone}}\",\n  \"address\": \"{{address}}\",\n  \"statusId\": \"{{statusId}}\",\n  \"createdAt\": \"2024-01-15T10:00:00Z\",\n  \"createdBy\": \"{{uuid}}\",\n  \"updatedAt\": \"2024-01-15T10:00:00Z\",\n  \"updatedBy\": \"{{uuid}}\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Update Vendors",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Vendors",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/vendors/{{vendorId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "vendors",
                    "{{vendorId}}"
                  ]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "// Test script for Delete Vendors",
                      "pm.test('Response time is less than 5000ms', function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response has valid status code', function () {",
                      "  pm.expect(pm.response.code).to.be.oneOf([200, 201, 204, 400, 401, 403, 404, 500]);",
                      "});",
                      "",
                      "// Log response for debugging",
                      "if (pm.response.code >= 400) {",
                      "  console.log('Error Response:', pm.response.text());",
                      "}",
                      "",
                      "// Validate JSON response structure",
                      "if (pm.response.code < 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
                      "  try {",
                      "    const jsonResponse = pm.response.json();",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect(jsonResponse).to.be.an('object');",
                      "    });",
                      "  } catch (e) {",
                      "    pm.test('Response is valid JSON', function () {",
                      "      pm.expect.fail('Response is not valid JSON');",
                      "    });",
                      "  }",
                      "}"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}