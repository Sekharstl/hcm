openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8098
  description: Generated server url
paths:
  /admin/kafka/topics:
    get:
      tags:
      - admin-controller
      operationId: listTopics
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
    post:
      tags:
      - admin-controller
      operationId: createTopic
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: partitions
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 3
      - name: replication
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/tenants:
    get:
      tags:
      - tenant-controller
      operationId: getAllTenants
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantDTO'
  /api/v1/tenants/{tenantId}:
    get:
      tags:
      - tenant-controller
      operationId: getTenantById
      parameters:
      - name: tenantId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TenantDTO'
  /admin/kafka/topics/{topic}/describe:
    get:
      tags:
      - admin-controller
      operationId: describeTopic
      parameters:
      - name: topic
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TopicDescription'
  /admin/kafka/topics/{name}/offsets:
    get:
      tags:
      - admin-controller
      operationId: getEndOffsets
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int64
  /admin/kafka/consumer-groups/{groupId}/offsets:
    get:
      tags:
      - admin-controller
      operationId: getConsumerGroupOffsets
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/OffsetAndMetadata'
  /admin/kafka/topics/{name}:
    delete:
      tags:
      - admin-controller
      operationId: deleteTopic
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    TenantDTO:
      type: object
      properties:
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
    TopicDescription:
      type: object
      properties:
        internal:
          type: boolean
    OffsetAndMetadata:
      type: object
