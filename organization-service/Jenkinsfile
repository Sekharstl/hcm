pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'techbu/hcm-organization-service'
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = 'hcm'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    dir('organization-service') {
                        sh '''
                            echo "Logging into Docker Hub..."
                            echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin || exit 1
                            echo "Building Docker image..."
                            docker build -t $DOCKER_IMAGE:$DOCKER_TAG . || exit 1
                            echo "Tagging latest image..."
                            docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest || exit 1
                            echo "Pushing versioned image..."
                            docker push $DOCKER_IMAGE:$DOCKER_TAG || exit 1
                            echo "Pushing latest image..."
                            docker push $DOCKER_IMAGE:latest || exit 1
                        '''
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                        sh 'echo ==== Jenkins Kubeconfig Diagnostics ===='
                        sh 'kubectl --kubeconfig=$KUBECONFIG config get-contexts'
                        sh 'kubectl --kubeconfig=$KUBECONFIG config current-context'
                        sh 'kubectl --kubeconfig=$KUBECONFIG cluster-info'
                        sh 'kubectl --kubeconfig=$KUBECONFIG get ns'
                        sh 'kubectl --kubeconfig=$KUBECONFIG get all --all-namespaces'
                        sh 'ls -l k8s/'
                        sh """
                            echo "Verifying cluster access..."
                            kubectl --kubeconfig=$KUBECONFIG cluster-info || exit 1
                            
                            echo "Creating namespace if it doesn't exist..."
                            kubectl --kubeconfig=$KUBECONFIG create namespace hcm --dry-run=client -o yaml | kubectl --kubeconfig=$KUBECONFIG apply -f - || exit 1
                            
                            echo "Applying ConfigMap..."
                            kubectl --kubeconfig=$KUBECONFIG apply -n hcm -f k8s/configmap.yaml || exit 1
                            
                            echo "Applying Secrets (if present)..."
                            if [ -f k8s/secrets.yaml ]; then
                              kubectl --kubeconfig=$KUBECONFIG apply -n hcm -f k8s/secrets.yaml || exit 1
                            fi
                            
                            echo "Applying Service..."
                            kubectl --kubeconfig=$KUBECONFIG apply -n hcm -f k8s/service.yaml || exit 1
                            
                            echo "Checking if deployment exists..."
                            if ! kubectl --kubeconfig=$KUBECONFIG get deployment organization-service -n hcm &>/dev/null; then
                                echo "Deployment does not exist. Creating initial deployment..."
                                kubectl --kubeconfig=$KUBECONFIG apply -n hcm -f k8s/deployment.yaml || exit 1
                            else
                                echo "Updating existing deployment with new image..."
                                kubectl --kubeconfig=$KUBECONFIG set image deployment/organization-service \
                                    organization-service=$DOCKER_IMAGE:$DOCKER_TAG \
                                    -n hcm || exit 1
                            fi
                            
                            echo "Waiting for deployment resource to be available..."
                            for i in {1..10}; do
                              kubectl --kubeconfig=$KUBECONFIG get deployment organization-service -n hcm && break
                              echo "Deployment not found yet. Waiting 3 seconds..."
                              sleep 3
                            done
                            
                            echo "Recent events in namespace..."
                            kubectl --kubeconfig=$KUBECONFIG get events -n hcm --sort-by=.metadata.creationTimestamp | tail -20
                            
                            echo "All resources in namespace..."
                            kubectl --kubeconfig=$KUBECONFIG get all -n hcm
                            
                            echo "Waiting for deployment to complete..."
                            kubectl --kubeconfig=$KUBECONFIG rollout status deployment/organization-service -n hcm || exit 1
                            
                            echo "Deployment completed successfully!"
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout || true'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
} 