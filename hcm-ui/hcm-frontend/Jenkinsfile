pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'docker.io' // Change as needed
        DOCKER_IMAGE = 'techbu/hcm-frontend' // Change as needed
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = 'hcm'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Debug: List files') {
            steps {
                dir('hcm-ui/hcm-frontend') {
                    script {
                        sh 'ls -l src/store/slices'
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'sonarqube-credentials', usernameVariable: 'SONAR_USER', passwordVariable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') {
                        dir('hcm-ui/hcm-frontend') {
                            sh '''
                                npx sonar-scanner \
                                  -Dsonar.projectKey="hcm-frontend" \
                                  -Dsonar.projectName="HCM Frontend" \
                                  -Dsonar.sources=. \
                                  -Dsonar.login="${SONAR_TOKEN}"
                            '''
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('hcm-ui/hcm-frontend') {
                    script {
                        sh 'docker build --no-cache -t techbu/hcm-frontend:${BUILD_NUMBER} .'
                        sh 'docker tag techbu/hcm-frontend:${BUILD_NUMBER} techbu/hcm-frontend:latest'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
                    docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG
                    docker tag $DOCKER_IMAGE:latest $DOCKER_REGISTRY/$DOCKER_IMAGE:latest
                    docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_TAG
                    docker push $DOCKER_REGISTRY/$DOCKER_IMAGE:latest
                    '''
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG
                    kubectl apply -f hcm-ui/hcm-frontend/k8s/configmap.yaml -n $KUBE_NAMESPACE
                    kubectl apply -f hcm-ui/hcm-frontend/k8s/secret.yaml -n $KUBE_NAMESPACE
                    kubectl apply -f hcm-ui/hcm-frontend/k8s/deployment.yaml -n $KUBE_NAMESPACE
                    kubectl apply -f hcm-ui/hcm-frontend/k8s/service.yaml -n $KUBE_NAMESPACE
                    kubectl apply -f hcm-ui/hcm-frontend/k8s/ingress.yaml -n $KUBE_NAMESPACE
                    '''
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout || true'
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed! Check the logs for details.'
        }
    }
} 